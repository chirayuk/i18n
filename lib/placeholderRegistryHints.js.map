{"version":3,"sources":["placeholderRegistryHints.es6"],"names":[],"mappings":";;;;;;;;;;QAIgB,yBAAyB,GAAzB,yBAAyB;;6BAJtB,iBAAiB;;IAAxB,CAAC;;AAEb,IAAI,qBAAqB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC,qBAAqB,CAAC;;AAE5F,SAAS,yBAAyB,CAAC,WAAW,EAAE;AACrD,MAAI,WAAW,YAAY,CAAC,CAAC,OAAO,EAAE;AACpC,QAAI,QAAQ,GAAG,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAChD,YAAQ,QAAQ;AACd,WAAK,CAAC,CAAC,sBAAsB;AAC3B,eAAO,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAAA,AAChD;;;;;AAKE,cAAM,KAAK,yDAAuD,QAAQ,gCAA6B,CAAC;AAAA,KAC3G;GACF,MAAM;AACL,WAAO,AAAC,WAAW,YAAY,CAAC,CAAC,MAAM,GAAI,YAAY,GAAG,IAAI,CAAC;GAChE;CACF","file":"lib/placeholderRegistryHints.js","sourcesContent":["import * as M from './message_types';\n\nvar getNameHintForHtmlTag = require(\"./placeholderRegistryHintsForHtmlTags\").getNameHintForHtmlTag;\n\nexport function getNameHintForPlaceholder(placeholder) {\n  if (placeholder instanceof M.TagPair) {\n    var typeName = M.getStableTypeName(placeholder);\n    switch (typeName) {\n      case M.TYPENAME_HTML_TAG_PAIR:\n        return getNameHintForHtmlTag(placeholder.tag);\n      default:\n        // NOTE: If/When we support different tag types, we want to come up with\n        // a sane system of naming the generated placeholders instead of\n        // generating one automatically here.  By throwing an error here, we\n        // force ourselves to revisit this code and pick a good naming scheme.\n        throw Error(`InternalError: Placeholder hints for tags of type \"${typeName}\" are not yet implemented.`);\n    }\n  } else {\n    return (placeholder instanceof M.NgExpr) ? 'EXPRESSION' : 'PH';\n  }\n}\n"]}