{"version":3,"sources":["lib/parse_html.es6"],"names":[],"mappings":";;;;;;sBAAmB,QAAQ;;;;sBACR,QAAQ;;;;AAE3B,IAAI,QAAQ,GAAG,oBAAO,YAAY,WAAQ,CAAC;;AAE3C,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;;;AAG3B,OAAO,CAAC,SAAS,GAAG,SAAS,SAAS,CAAC,IAAI,EAAE;AAC3C,MAAI,MAAM,GAAG,IAAI,oBAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;AACzC,MAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;;;AAI9B,MAAI,QAAQ;;;;;;;6CAAkB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC;YAArC,KAAK;;YACN,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC;yBACvC,KAAK;;;;;;;;;;;;;;;;;;;MAAC,CAAC;AACvB,MAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;AACxB,UAAM,KAAK,CAAC,uEAAuE,CAAC,CAAC;GACtF;AACD,SAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;CACpB,CAAA","file":"lib/parse_html.js","sourcesContent":["import assert from 'assert';\nimport parse5 from 'parse5';\n\nvar _ADAPTER = parse5.TreeAdapters.default;\n\nexports.adapter = _ADAPTER;\n\n// Returns the root element.\nexports.parseHtml = function parseHtml(html) {\n  let parser = new parse5.Parser(_ADAPTER);\n  let root = parser.parse(html);\n  // Normally, \"root\" is the document node and contains the optional doctype\n  // node and the HTML node as children.  We'll skip the doctype node and\n  // return the only HTML node.\n  let elements = [for (child of _ADAPTER.getChildNodes(root))\n                  if (!_ADAPTER.isDocumentTypeNode(child))\n                  child];\n  if (elements.length != 1) {\n    throw Error(\"Found more than one element at the root level while parsing HTML text\");\n  }\n  return elements[0];\n}\n"]}