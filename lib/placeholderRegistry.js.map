{"version":3,"sources":["lib/placeholderRegistry.es6"],"names":[],"mappings":"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","file":"lib/placeholderRegistry.js","sourcesContent":["import * as M from './message_types';\nimport {LoadingCache} from './LoadingCache';\nimport {Counter} from './Counter';\nimport {getNameHintForPlaceholder} from './placeholderRegistryHints';\n\nif ((true + true !== 2) || (false + false) !== 0) {\n  throw Error(\"Internal Error: Please file an issue on GitHub with this stacktrace.\");\n}\n\nfunction toBool(x) {\n  return x ? true : false;\n}\n\nclass PlaceholderRegistry {\n  constructor() {\n    this._namesSeen = new Set();\n    // We require an ordered Map.  ES6 Map's iterate in insertion order (Map.forEach)\n    // so we can simply use Map.\n    // Refer section 23.1.3.5 of the draft spec.\n    // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.foreach\n    this._byFingerprint = new Map();\n    this._countsByPrefix = new LoadingCache(key => new Counter(1));\n    this._counter = new Counter(1);\n  }\n\n  toMap() {\n    var self = this;\n    this._byFingerprint.forEach(placeholderOrTag => self._ensureName(placeholderOrTag));\n    var result = new Map();\n    for (let placeholderOrTag of this._byFingerprint.values()) {\n      if (placeholderOrTag instanceof M.PlaceholderBase) {\n        result.set(placeholderOrTag.name, placeholderOrTag);\n      } else if (placeholderOrTag instanceof M.TagPair) {\n        var tag_pair = placeholderOrTag;\n        result.set(tag_pair.beginPlaceholderRef.name, tag_pair.beginPlaceholderRef);\n        result.set(tag_pair.endPlaceholderRef.name, tag_pair.endPlaceholderRef);\n      } else {\n        throw Error('Internal Error');\n      }\n    }\n    return result;\n  }\n\n  _ensureNamesForTag(placeholder) {\n    if (placeholder.beginPlaceholderRef.name) {\n      return;\n    }\n    var nameHint = getNameHintForPlaceholder(placeholder);\n    var beginBasename = nameHint + '_BEGIN',\n        endBasename   = nameHint + '_END',\n        phBeginName   = beginBasename,\n        phEndName     = endBasename,\n        counter       = this._countsByPrefix.get(beginBasename);\n    while (this._namesSeen.has(phBeginName) || this._namesSeen.has(phEndName)) {\n      var count = counter.next();\n      phBeginName = `${beginBasename}_${count}`;\n      phEndName = `${endBasename}_${count}`;\n    }\n    this._namesSeen.add(phBeginName);\n    this._namesSeen.add(phEndName);\n    placeholder.beginPlaceholderRef.name = phBeginName;\n    placeholder.endPlaceholderRef.name = phEndName;\n  }\n\n  ensureNameForPlaceholder(placeholder) {\n    if (placeholder.name) {\n      return;\n    }\n    var basename = getNameHintForPlaceholder(placeholder),\n        name     = basename;\n    var counter = this._countsByPrefix.get(basename);\n    while (this._namesSeen.has(name)) {\n      name = `${basename}_${counter.next()}`;\n    }\n    this._namesSeen.add(name);\n    placeholder.name = name;\n  }\n\n  _ensureName(placeholder) {\n    if (placeholder instanceof M.TagPair) {\n      this._ensureNamesForTag(placeholder);\n    } else {\n      this.ensureNameForPlaceholder(placeholder);\n    }\n  }\n\n  reserveNewTag(tagName) {\n    var canonicalKey = `TAG_${tagName}_${this._counter.next()}`;\n    this._byFingerprint.set(canonicalKey, null);\n    return canonicalKey;\n  }\n\n  updatePlaceholder(placeholder) {\n    if (placeholder instanceof M.TagPair) {\n      return this._updateTagPlaceholder(placeholder);\n    } else {\n      return this._updateSimplePlaceholder(placeholder);\n    }\n  }\n\n  _updateTagPlaceholder(placeholder) {\n    var canonicalKey = placeholder.toLongFingerprint();\n    this._byFingerprint.set(canonicalKey, placeholder);\n    return placeholder;\n  }\n\n  _updateSimplePlaceholder(placeholder) {\n    var canonicalKey = placeholder.toLongFingerprint();\n    var existingPlaceholder = this._byFingerprint.get(canonicalKey);\n    if (existingPlaceholder !== void 0) {\n      var numNames = toBool(placeholder.name) + toBool(existingPlaceholder.name);\n      if (numNames === 2) {\n        if (placeholder.name != existingPlaceholder.name) {\n          throw Error('The same placeholder occurs more than once with a different placeholder name.');\n        }\n      } else if (numNames == 1) {\n        if (placeholder.name == null) {\n          placeholder.name = existingPlaceholder.name;\n        } else {\n          existingPlaceholder.name = placeholder.name;\n        }\n      }\n    } else {\n      this._byFingerprint.set(canonicalKey, placeholder);\n    }\n    return placeholder;\n  }\n}\n\nmodule.exports = PlaceholderRegistry;\n"]}