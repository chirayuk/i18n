{"version":3,"sources":["lib/stringUtils.es6"],"names":[],"mappings":"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","file":"lib/stringUtils.js","sourcesContent":["\"use strict\";\n\nvar assert = require(\"assert\");\n\nfunction _repeatForever(value) {\n  return function next() {\n    return value;\n  };\n}\n\nfunction _repeatN(n, value, finalValue) {\n  if (n === void 0 || n == -1) {\n    return _repeatForever(value);\n  }\n  assert(n >= 0 && Math.floor(n) == n, \"n must be an integer >= 0\");\n  return function next() {\n    if (n == 0) {\n      return finalValue;\n    } else {\n      --n;\n      return value;\n    }\n  };\n}\n\nfunction _splitFromLeft(text, separator, shouldContinueFn) {\n  var i = 0;\n  var iterator = { next: next };\n  function next() {\n    var j = shouldContinueFn() ? text.indexOf(separator, i) : -1;\n    if (j == -1) {\n      iterator.next = done;\n      return text.substring(i);\n    }\n    var piece = text.substring(i, j);\n    i = j + separator.length;\n    return piece;\n  }\n  function done() {\n    iterator.next = null;\n    return null;\n  }\n  return iterator;\n}\n\nfunction _splitFromRight(text, separator, shouldContinueFn) {\n  var i = text.length;\n  var iterator = { next: next };\n  var sepEnd, i2;\n  function next() {\n    var shouldContinue = shouldContinueFn();\n    i2 = i;\n    do {\n      var j = (i2 == 0 || !shouldContinue) ? -1 : text.lastIndexOf(separator, i2 - 1);\n      if (j == -1) {\n        iterator.next = done;\n        return text.substring(0, i);\n      }\n      sepEnd = j + separator.length;\n      i2 = j;\n    } while (sepEnd > i);\n    var piece = text.substring(sepEnd, i);\n    i = j;\n    return piece;\n  }\n  function done() {\n    iterator.next = null;\n    return null;\n  }\n  return iterator;\n}\n\n// split at most maxTimes.\nfunction splitN(text, separator, maxTimes, fromRight) {\n  assert(maxTimes === void 0 || (maxTimes >= -1 && Math.floor(maxTimes) == maxTimes), \"maxTimes must be an integer >= -1\");\n  assert(separator != \"\" && typeof separator == \"string\", \"separator cannot be an empty string\");\n  var shouldContinueFn = _repeatN(maxTimes, true, false);\n  var iter = (fromRight ? _splitFromRight : _splitFromLeft)(text, separator, shouldContinueFn);\n  var pieces = [], piece, pusher = fromRight ? \"unshift\" : \"push\";\n  while (null != (piece = iter.next())) {\n    pieces[pusher](piece);\n  }\n  return pieces;\n}\n\nfunction quoteString(value, dQuoteReplacement) {\n  var quoteTypes = (value.indexOf(\"'\") != -1 ? 1 : 0) + (value.indexOf('\"') != -1 ? 2 : 0);\n  // If there are double quotes in the string but no single quotes,\n  // then simply wrap with single quotes and return. No escaping needed.\n  if (quoteTypes === 2) {\n    return \"'\" + value + \"'\";\n  }\n  // Wrap with double quotes for all other cases.\n  // Therefore, we need to escape double quotes if they're present.\n  if (quoteTypes === 3) {\n    value = value.replace(/\"/g, dQuoteReplacement || '\\\\\"');\n  }\n  return '\"' + value + '\"';\n}\n\nexports.splitN = splitN;\nexports.quoteString = quoteString;\n"]}