{"version":3,"sources":["lib/parse_messages.es6"],"names":[],"mappings":";;;;;;;;;;;QAmRgB,aAAa,GAAb,aAAa;AAnR7B,YAAY,CAAC;;;AAGb,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE1B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAClB,aAAa,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAC7C,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,OAAO;IAC7C,mBAAmB,GAAG,OAAO,CAAC,uBAAuB,CAAC;IACtD,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM;IACxC,kBAAkB,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,kBAAkB;IAC5D,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC;IAC5C,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE1B,SAAS,GAAG,GAAG,EAAE;;AAEjB,SAAS,MAAM,CAAC,CAAC,EAAE;AACjB,SAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;CAC7B;;AAED,SAAS,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE;AAC3B,SAAO,AAAC,CAAC,IAAI,IAAI,GAAI,QAAQ,GAAG,CAAC,CAAC;CACnC;;IAEK,aAAa,GACN,SADP,aAAa,CACL,OAAO,EAAE,OAAO,EAAE;wBAD1B,aAAa;;AAEf,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC;CACxB;;AAGH,SAAS,4BAA4B,CAAC,MAAM,EAAE;AAC5C,MAAI,MAAM,IAAI,IAAI,IAAI,MAAM,KAAK,EAAE,EAAE;AACnC,UAAM,KAAK,gCAA8B,MAAM,kBAAe,CAAC;GAChE;AACD,MAAI,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;AACrB,MAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAC9C,UAAM,KAAK,gCAA8B,MAAM,kDAA+C,CAAC;GAChG;AACD,MAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC9B,MAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE;AAC7D,UAAM,KAAK,gCAA8B,MAAM,2EAAwE,CAAC;GACzH;AACD,MAAI,IAAI,CAAC,CAAC,KAAK,mBAAmB,EAAE;AAClC,UAAM,KAAK,gCAA8B,MAAM,8BAA2B,CAAC;GAC5E;CACF;;AAED,SAAS,eAAe,CAAC,UAAU,EAAE;AACnC,YAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AAC/B,MAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;AACjC,WAAO,IAAI,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;GAC5C;;;;;;;;;2BACsC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YAAlC,IAAI;;kBAAgC,IAAI,CAAC,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;MAAzE,OAAO;MAAE,OAAO;;AACrB,MAAI,OAAO,KAAK,EAAE,EAAE;AAClB,UAAM,KAAK,CAAC,+CAA+C,CAAC,CAAC;GAC9D;AACD,SAAO,IAAI,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;CAC5C;;AAED,IAAI,aAAa,GAAG,iBAAiB,CAAC;AACtC,SAAS,iBAAiB,CAAC,IAAI,EAAE;AAC/B,MAAI,IAAI,GAAG,IAAI;MAAE,QAAQ,GAAG,IAAI;MAAE,OAAO,GAAG,oBAAoB,CAAC;;AAEjE,MAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;AAChC,WAAO,IAAI,aAAa,CAAC,MAAM;aAClB,IAAI,WAAW,IAAI,eAAe,QAAQ,cAAc,OAAO,CAAC,CAAC;GAC/E;AACD,MAAI,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAClC,MAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACvB,MAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACjC,MAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACvC,MAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;AAC7B,UAAM,KAAK,CAAC,uEAAuE,CAAC,CAAA;GACrF;AACD,MAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACzB,MAAI,MAAM,GAAG,MAAM;MAAE,OAAO,GAAG,IAAI,CAAC;AACpC,OAAK,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAC/B,MAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,UAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACzB,WAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;GAC3B;AACD,8BAA4B,CAAC,MAAM,CAAC,CAAC;AACrC,MAAI,QAAQ,GAAG,AAAC,OAAO,IAAI,IAAI,GAAI,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;AACpD,SAAO,IAAI,aAAa,CAAC,MAAM;WAClB,MAAM,WAAW,IAAI,eAAe,QAAQ,cAAc,OAAO,CAAC,CAAC;CACjF;;AAED,IAAI,UAAU,GAAG,qBAAqB,CAAC;AACvC,SAAS,gCAAgC,CAAC,IAAI,EAAE,mBAAmB,EAAE;AACnE,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,MAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AACpC,MAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;;AAE1B,UAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACjB;AACD,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC7C,QAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACpB,QAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AAClB,WAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACjB;AACD,QAAI,IAAI,GAAG,MAAM,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC9B,QAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,UAAI,MAAM,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5E,WAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpB;GACF;AACD,SAAO,KAAK,CAAC;CACd;;AAED,SAAS,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE;AACvC,SAAO,AAAC,KAAK,IAAI,IAAI,GAAI,IAAI,QAAM,IAAI,SAAI,kBAAkB,CAAC,KAAK,CAAC,AAAE,CAAC;CACxE;;AAED,SAAS,mBAAmB,CAAC,IAAI,EAAE;AACjC,MAAI,eAAe,GAAG,EAAE,CAAC;;;;;;AACzB,0BAAiB,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,mIAAE;UAAnD,IAAI;;AACX,qBAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACjE;;;;;;;;;;;;;;;;AACD,SAAO,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;CAClC;;AAED,SAAS,oBAAoB,CAAC,IAAI,EAAE;AAClC,MAAI,eAAe,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAChD,MAAI,eAAe,KAAK,EAAE,EAAE;AAC1B,mBAAe,GAAG,GAAG,GAAG,eAAe,CAAC;GACzC;AACD,MAAI,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACvC,MAAI,KAAK,SAAO,GAAG,QAAG,eAAe,MAAG,CAAC;AACzC,MAAI,GAAG,UAAQ,GAAG,MAAG,CAAC;AACtB,SAAO,EAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAC,CAAC;CACjC;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE,mBAAmB,EAAE;AAC7C,MAAI,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAChC,WAAO,gCAAgC,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,mBAAmB,CAAC,CAAC;GACpG;AACD,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,WAAS,WAAW,CAAC,KAAK,EAAE;AAC1B,SAAK,CAAC,OAAO,CAAC,UAAA,KAAK;aAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;KAAA,CAAC,CAAC;GAC3C;;;;;;AACD,0BAAkB,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,mIAAE;UAA1C,KAAK;;AACZ,iBAAW,CAAC,UAAU,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC,CAAC;KACrD;;;;;;;;;;;;;;;;AACD,MAAI,YAAY,GAAG,mBAAmB,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AACnF,MAAI,YAAY,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;AAC9C,MAAI,OAAO,GAAG,aAAa,CAAC,WAAW,CAAC,aAAa;UACzC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,YAAY,CAAC,KAAK;UACpB,YAAY,CAAC,GAAG;YACd,KAAK;eACF,IAAI;yBACM,YAAY,CAAC,CAAC;AACzC,SAAO,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;CACzD;;AAED,SAAS,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,EAAE;AACpD,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,WAAS,WAAW,CAAC,KAAK,EAAE;AAC1B,SAAK,CAAC,OAAO,CAAC,UAAA,KAAK;aAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;KAAA,CAAC,CAAC;GAC3C;AACD,QAAM,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;WACzD,WAAW,CAAC,UAAU,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;GAAA,CAAC,CAAC;AAC7D,SAAO,KAAK,CAAC;CACd;;IAGK,cAAc;AACP,WADP,cAAc,CACN,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE;0BADxC,cAAc;;AAEhB,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAI,aAAa,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;AAChD,QAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;AACrC,QAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;;AAErC,QAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;AACrD,QAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AAClC,UAAI,CAAC,KAAK,GAAG,gCAAgC,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;KACrF,MAAM;AACL,UAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;KACtE,CAAC;GACH;;eAbG,cAAc;;WAeb,iBAAG;AACN,UAAI,EAAE,GAAG,cAAc,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;AACzD,UAAI,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;AAC1D,aAAO,IAAI,aAAa,CAAC,OAAO,SAAQ,EAAE;kBACG,IAAI,CAAC,OAAO;kBACZ,IAAI,CAAC,OAAO;gBACd,IAAI,CAAC,KAAK;6BACG,kBAAkB,CAAC,CAAC;KAC7E;;;SAvBG,cAAc;;;AA0BpB,IAAI,kBAAkB,GAAG,OAAO,CAAC;;AAEjC,IAAI,aAAa,GAAG;AAClB,UAAQ,EAAE,GAAG;AACb,QAAM,EAAE,GAAG;CACZ,CAAC;;AAGF,SAAS,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;;;;;;AACnC,0BAAiB,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,mIAAE;UAAnD,IAAI;;AACX,UAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC1B,eAAO,IAAI,CAAC;OACb;KACF;;;;;;;;;;;;;;;;AACD,SAAO,IAAI,CAAC;CACb;;IAGK,aAAa;AACN,WADP,aAAa,CACL,OAAO,EAAE;0BADjB,aAAa;;AAEf,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;GACpB;;eALG,aAAa;;WAOA,2BAAC,IAAI,EAAE;AACtB,UAAI,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7C,UAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;AAC5C,eAAO;OACR;AACD,UAAI,WAAW,GAAG,EAAE,CAAC;AACrB,UAAI,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7B,cAAQ,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AAC9B,oBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AACxC,YAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;AAC9C,qBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxB;OACF,CAAC,CAAC;AACH,UAAI,WAAW,CAAC,MAAM,IAAI,CAAC,EAAE;AAC3B,eAAO;OACR;;;;;;AACD,8BAAqB,WAAW,mIAAE;cAAzB,QAAQ;;AACf,cAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC/D,cAAI,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5C,cAAI,OAAO,GAAG,IAAI,cAAc,iBAAgB,QAAQ,CAAC,KAAK,gBAAgB,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;AAClG,cAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;AACpC,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;SAChD;;;;;;;;;;;;;;;KACF;;;;;WAGuB,kCAAC,IAAI,EAAE;AAC7B,UAAI,QAAQ,GAAG,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACzC,UAAI,QAAQ,IAAI,IAAI,EAAE;AACpB,eAAO,KAAK,CAAC;OACd;AACD,UAAI,OAAO,GAAG,IAAI,cAAc,iBAAgB,QAAQ,CAAC,KAAK,gBAAgB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;AAC5F,UAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;AACpC,UAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACnC,aAAO,IAAI,CAAC;KACb;;;WAEY,uBAAC,IAAI,EAAE;AAClB,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtB,aAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5B,YAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAC9B,YAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC7B,YAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE;;AAExC,cAAI,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACjD,cAAI,MAAM,CAAC,UAAU,CAAC,EAAE;AACtB,gBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;WAClD;SACF;OACF;KACF;;;SAzDG,aAAa;;;AA6DZ,SAAS,aAAa,CAAC,QAAQ,gBAAgB,OAAO,EAAE;AAC7D,MAAI,OAAO,IAAI,IAAI,EAAE;AACnB,WAAO,GAAG,aAAa,CAAC;GACzB;AACD,MAAI,MAAM,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AACxC,QAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC/B,SAAO,MAAM,CAAC,QAAQ,CAAC;CACxB","file":"lib/parse_messages.js","sourcesContent":["\"use strict\";\n\n// For definition of Symbol, etc.\nrequire(\"babel/polyfill\");\n\nvar assert = require(\"assert\"),\n    util = require(\"util\"),\n    fs = require(\"fs\"),\n    message_types = require(\"./message_types.js\"),\n    treeAdapter = require(\"./parse_html\").adapter,\n    PlaceholderRegistry = require(\"./placeholderRegistry\"),\n    splitN = require(\"./stringUtils\").splitN,\n    quoteHtmlAttribute = require(\"./quoting\").quoteHtmlAttribute,\n    fingerprinting = require(\"./fingerprinting\"),\n    S = require(\"string\");\n\nfunction nop() {}\n\nfunction tobool(o) {\n  return o != null && o != \"\";\n}\n\nfunction ifNull(o, whenNull) {\n  return (o == null) ? whenNull : o;\n}\n\nclass ParsedComment {\n  constructor(meaning, comment) {\n    this.meaning = meaning;\n    this.comment = comment;\n  }\n}\n\nfunction validateValidPlaceholderName(phName) {\n  if (phName == null || phName === \"\") {\n    throw Error(`invalid placeholder name: ${phName}: empty name`);\n  }\n  var name = S(phName);\n  if (name.startsWith(\"_\") || name.endsWith(\"_\")) {\n    throw Error(`invalid placeholder name: ${phName}: should not begin or end with an underscore`);\n  }\n  name = name.replace(/_/g, '');\n  if (!name.isAlphaNumeric() || name.toUpperCase().s !== name.s) {\n    throw Error(`invalid placeholder name: ${phName}: It may only be composed of capital letters, digits and underscores.`);\n  }\n  if (name.s === 'EMBEDDED_MESSAGES') {\n    throw Error(`invalid placeholder name: ${phName}: This name is reserved.`);\n  }\n}\n\nfunction parseRawComment(rawComment) {\n  rawComment = rawComment.trim();\n  if (rawComment.indexOf(\"|\") == -1) {\n    return new ParsedComment(null, rawComment);\n  }\n  var [meaning, comment] = [for (part of splitN(rawComment, '|', 1)) part.trim()];\n  if (meaning === \"\") {\n    throw Error('meaning was explicitly specified but is empty');\n  }\n  return new ParsedComment(meaning, comment);\n}\n\nvar NG_EXPR_PH_RE = /i18n-ph\\((.*)\\)/;\nfunction parseNgExpression(text) {\n  var name = null, examples = null, comment = \"Angular Expression\";\n  // text should not have the {{ }} around it.\n  text = text.trim();\n  if (text.lastIndexOf(\"//\") == -1) {\n    return new message_types.NgExpr(\n        /*name=*/name, /*text=*/text, /*examples=*/examples, /*comment=*/comment);\n  }\n  var parts = splitN(text, '//', 1);\n  text = parts[0].trim();\n  var rawComment = parts[1].trim();\n  var m = NG_EXPR_PH_RE.exec(rawComment);\n  if (m == null || m.index != 0) {\n    throw Error(\"Angular expression has a comment but it wasn't valid i18n-ph() syntax\")\n  }\n  var phText = m[1].trim();\n  var phName = phText, example = null;\n  parts = splitN(phText, \"|\", 1);\n  if (parts.length > 1) {\n    phName = parts[0].trim();\n    example = parts[1].trim();\n  }\n  validateValidPlaceholderName(phName);\n  var examples = (example == null) ? null : [example];\n  return new message_types.NgExpr(\n      /*name=*/phName, /*text=*/text, /*examples=*/examples, /*comment=*/comment);\n}\n\nvar NG_EXPR_RE = /\\{\\{\\s*(.*?)\\s*\\}\\}/;\nfunction parseMessageTextForNgExpressions(text, placeholderRegistry) {\n  var parts = [];\n  var splits = text.split(NG_EXPR_RE);\n  if (splits.length % 2 == 1) {\n    // So that our loop can \"safely\" inspect 2 items at a time.\n    splits.push(\"\");\n  }\n  for (let i = 0; i + 1 < splits.length; i += 2) {\n    var txt = splits[i];\n    if (txt.length > 0) {\n      parts.push(txt);\n    }\n    var expr = splits[i+1].trim();\n    if (expr.length > 0) {\n      var ngExpr = placeholderRegistry.updatePlaceholder(parseNgExpression(expr));\n      parts.push(ngExpr);\n    }\n  }\n  return parts;\n}\n\nfunction _serializeHtmlAttr(name, value) {\n  return (value == null) ? name : `${name}=${quoteHtmlAttribute(value)}`;\n}\n\nfunction _getSerializedAttrs(node) {\n  var serializedAttrs = [];\n  for (let attr of ifNull(treeAdapter.getAttrList(node), [])) {\n    serializedAttrs.push(_serializeHtmlAttr(attr.name, attr.value));\n  }\n  return serializedAttrs.join(' ');\n}\n\nfunction _getHtmlBeginEndTags(node) {\n  var serializedAttrs = _getSerializedAttrs(node);\n  if (serializedAttrs !== \"\") {\n    serializedAttrs = ' ' + serializedAttrs;\n  }\n  var tag = treeAdapter.getTagName(node);\n  var begin = `<${tag}${serializedAttrs}>`;\n  var end = `</${tag}>`;\n  return {begin: begin, end: end};\n}\n\nfunction _parseNode(node, placeholderRegistry) {\n  if (treeAdapter.isTextNode(node)) {\n    return parseMessageTextForNgExpressions(treeAdapter.getTextNodeContent(node), placeholderRegistry);\n  }\n  var parts = [];\n  function extendParts(extra) {\n    extra.forEach(value => parts.push(value));\n  }\n  for (let child of treeAdapter.getChildNodes(node)) {\n    extendParts(_parseNode(child, placeholderRegistry));\n  }\n  var canonicalKey = placeholderRegistry.reserveNewTag(treeAdapter.getTagName(node));\n  var beginEndTags = _getHtmlBeginEndTags(node);\n  var tagPair = message_types.HtmlTagPair.NewForParsing(\n      /*tag=*/treeAdapter.getTagName(node),\n      /*begin=*/beginEndTags.begin,\n      /*end=*/beginEndTags.end,\n      /*parts=*/parts,\n      /*examples=*/null,\n      /*tagFingerprintLong=*/canonicalKey);\n  return [placeholderRegistry.updatePlaceholder(tagPair)];\n}\n\nfunction parseNodeContents(root, placeholderRegistry) {\n  var parts = [];\n  function extendParts(extra) {\n    extra.forEach(value => parts.push(value));\n  }\n  ifNull(treeAdapter.getChildNodes(root), []).forEach(childNode =>\n      extendParts(_parseNode(childNode, placeholderRegistry)));\n  return parts;\n}\n\n\nclass MessageBuilder {\n  constructor(rawComment, rawMessage, parent) {\n    this.parent = parent;\n    var parsedComment = parseRawComment(rawComment);\n    this.meaning = parsedComment.meaning;\n    this.comment = parsedComment.comment;\n    //ckck// this.placeholderRegistry = (parent ? parent.placeholderRegistry : new PlaceholderRegistry());\n    this.placeholderRegistry = new PlaceholderRegistry();\n    if (typeof rawMessage === \"string\") {\n      this.parts = parseMessageTextForNgExpressions(rawMessage, this.placeholderRegistry);\n    } else {\n      this.parts = parseNodeContents(rawMessage, this.placeholderRegistry);\n    };\n  }\n\n  build() {\n    var id = fingerprinting.computeIdForMessageBuilder(this);\n    var placeholdersByName = this.placeholderRegistry.toMap();\n    return new message_types.Message(/*id=*/id,\n                                     /*meaning=*/this.meaning,\n                                     /*comment=*/this.comment,\n                                     /*parts=*/this.parts,\n                                     /*placeholdersByName=*/placeholdersByName);\n  }\n}\n\nvar I18N_ATTRIB_PREFIX = 'i18n-';\n\nvar _dummyOnParse = {\n  onAttrib: nop,\n  onNode: nop\n};\n\n\nfunction _findAttrib(node, attrName) {\n  for (let attr of ifNull(treeAdapter.getAttrList(node), [])) {\n    if (attr.name === attrName) {\n      return attr;\n    }\n  }\n  return null;\n}\n\n\nclass MessageParser {\n  constructor(onParse) {\n    this.onParse = onParse;\n    this.nodes = [];\n    this.messages = {};\n  }\n\n  _parseI18nAttribs(node) {\n    var attrList = treeAdapter.getAttrList(node);\n    if (attrList == null || attrList.length == 0) {\n      return;\n    }\n    var i18nAttribs = [];\n    var valuesByName = new Map();\n    attrList.forEach(function(attr) {\n      valuesByName.set(attr.name, attr.value);\n      if (attr.name.indexOf(I18N_ATTRIB_PREFIX) == 0) {\n        i18nAttribs.push(attr);\n      }\n    });\n    if (i18nAttribs.length == 0) {\n      return;\n    }\n    for (let i18nAttr of i18nAttribs) {\n      let attrName = i18nAttr.name.substr(I18N_ATTRIB_PREFIX.length);\n      let rawMessage = valuesByName.get(attrName);\n      let message = new MessageBuilder(/*rawComment=*/i18nAttr.value, /*rawMessage*/rawMessage).build();\n      this.messages[message.id] = message;\n      this.onParse.onAttrib(message, node, attrName);\n    }\n  }\n\n  // Returns true if this was an i18n node and false otherwise.\n  _parseMessagesInI18nNode(node) {\n    var i18nAttr = _findAttrib(node, \"i18n\");\n    if (i18nAttr == null) {\n      return false;\n    }\n    let message = new MessageBuilder(/*rawComment=*/i18nAttr.value, /*rawMessage*/node).build();\n    this.messages[message.id] = message;\n    this.onParse.onNode(message, node);\n    return true;\n  }\n\n  parseMessages(root) {\n    this.nodes.push(root);\n    while (this.nodes.length > 0) {\n      let node = this.nodes.shift();\n      this._parseI18nAttribs(node);\n      if (!this._parseMessagesInI18nNode(node)) {\n        // Not an i18n node so we should descend into it.\n        var childNodes = treeAdapter.getChildNodes(node);\n        if (tobool(childNodes)) {\n          this.nodes.unshift.apply(this.nodes, childNodes);\n        }\n      }\n    }\n  }\n}\n\n\nexport function parseMessages(rootNode, /* optional */onParse) {\n  if (onParse == null) {\n    onParse = _dummyOnParse;\n  }\n  var parser = new MessageParser(onParse);\n  parser.parseMessages(rootNode);\n  return parser.messages;\n}\n"]}