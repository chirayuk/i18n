{"version":3,"sources":["lib/fingerprinting.es6"],"names":[],"mappings":"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","file":"lib/fingerprinting.js","sourcesContent":["import assert from 'assert';\nimport * as M from './message_types';\nimport {SHA1} from './hashing';\nimport S from 'string';\n\n// Escape sequences for fingerprinting.\n// Fingerprinting requires unique digests for unique messages.  The approach is\n// to construct a unique long string for unique messages and use a fixed and\n// good fingerprinting algorithm to get a smaller digest out of it (64/128 bits\n// should be sufficient.)  These escape sequences are used in generating the\n// unique long string per message.\nvar ESCAPE_CHAR = \"\\x10\";\nvar ESCAPE_CHAR_RE = new RegExp(ESCAPE_CHAR, \"g\");\nvar ESCAPE_END = ESCAPE_CHAR + \".\";\nvar BEGIN_TEXT = ESCAPE_CHAR + \"'\";\nvar BEGIN_PH = ESCAPE_CHAR + \"X\";\nvar BEGIN_TAG = ESCAPE_CHAR + \"<\";\nvar END_TAG = ESCAPE_CHAR + \">\";\n\nfunction _escapeTextForMessageId(text) {\n  return text.replace(ESCAPE_CHAR_RE, ESCAPE_CHAR + ESCAPE_CHAR);\n}\n\nexport function computeIdForMessageBuilder(msgBuilder) {\n  var hasher = new SHA1();\n  for (let part of _genIdParts(msgBuilder)) {\n    hasher.update(part);\n  }\n  return hasher.hexdigest();\n}\n\nfunction* _genIdParts(msgBuilder) {\n  yield _escapeTextForMessageId(msgBuilder.meaning || '');\n  for (let i of _genIdPartsForSubparts(msgBuilder.parts)) {\n    yield i;\n  }\n}\n\nfunction* _genIdPartsForSubparts(parts) {\n  var placeholders = new Map();\n  for (let part of parts) {\n    if (part instanceof M.TextPart) {\n      yield `${BEGIN_TEXT}${_escapeTextForMessageId(part.value)}${ESCAPE_END}`;\n    } else if (part instanceof M.PlaceholderBase) {\n      placeholders.set(part.name, part);\n    } else if (part instanceof M.TagPair) {\n      yield `${BEGIN_TAG}${part.beginPlaceholderRef.name},${part.getStableTypeName()}${ESCAPE_END}`;\n      for (let i in _genIdPartsForSubparts(part.parts)) {\n        yield i;\n      }\n    } else {\n      throw Error(`Encountered unknown message part type while computing message ID: ${part.getStableTypeName()}`);\n    }\n  }\n  var placeholderNames = [];\n  for (let name of placeholders.keys()) {\n    placeholderNames.push(name);\n  }\n  placeholderNames.sort();\n  for (let name of placeholderNames) {\n    var placeholder = placeholders.get(name);\n    yield `{BEGIN_PH}{name},{placeholder.getStableTypeName()}{ESCAPE_END}`;\n  }\n}\n"]}