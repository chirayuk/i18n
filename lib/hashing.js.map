{"version":3,"sources":["lib/hashing.es6"],"names":[],"mappings":";;;;;;;;;;;;AAMA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;IASzB,IAAI;AACG,WADP,IAAI,GACM;0BADV,IAAI;;AAEN,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;GAC1C;;eAHG,IAAI;;WAKF,gBAAC,IAAI,eAAc;AACvB,UAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACnC;;;WAEQ,iCAAe;AACtB,UAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;AAExC,UAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,aAAO,MAAM,CAAC;KACf;;;SAdG,IAAI;;;AAiBV,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC","file":"lib/hashing.js","sourcesContent":["/**\n * This is a facade around the minimal hashing interface that we're using for\n * fingerpriting.  We might need to do this from the browser or the command\n * line or entirely change the underlying libraries we would use to do it.\n */\n\nvar crypto = require(\"crypto\");\n\n/*\ninterface Hasher {\n  update(data);\n  hexdigest();\n}\n*/\n\nclass SHA1 /* implements Hasher */ {\n  constructor() {\n    this._shasum = crypto.createHash('sha1');\n  }\n\n  update(text/*: string*/) {\n    this._shasum.update(text, 'utf8');\n  }\n\n  hexdigest()/*: string*/ {\n    var result = this._shasum.digest('hex');\n    // destroy underlying object so that we can't call update() anymore.\n    this._shasum = null;\n    return result;\n  }\n}\n\nexports.SHA1 = SHA1;\n"]}